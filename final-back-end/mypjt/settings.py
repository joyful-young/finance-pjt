"""
Django settings for mypjt project.

Generated by 'django-admin startproject' using Django 3.2.13.

For more information on this file, see
https://docs.djangoproject.com/en/3.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/3.2/ref/settings/
"""

from pathlib import Path
from corsheaders.defaults import default_headers
# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

import os
from dotenv import load_dotenv

MEDIA_URL = '/media/'
MEDIA_ROOT = os.path.join(BASE_DIR, 'media')


# Load the environment variables from the .env file
load_dotenv()

# Access the environment variables
secret_key = os.getenv('SECRET_KEY')
database_url = os.getenv('DATABASE_URL')
hwanyul_key = os.getenv('HWANYUL_KEY')
kakao_maps_api_key = os.getenv('KAKAO_MAP_KEY')
# Use the variables in your code
API_KEY = secret_key
HWANYUL_KEY = hwanyul_key
KAKAO_MAPS_API_KEY = kakao_maps_api_key


# print(f"Database URL: {database_url}")



# 환경변수를 불러올 수 있는 상태로 설정
# env = environ.Env(DEBUG=(bool, True))
# # 읽어올 환경 변수 파일을 지정
# environ.Env.read_env(
#     env_file= os.path.join(BASE_DIR, '.env')
# )
# # 읽어옴
# API_KEY = env('API_KEY')
# # Quick-start development settings - unsuitable for production
# # See https://docs.djangoproject.com/en/3.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'django-insecure-bmjwvgk$)94zdn^y4mgtr-!s_1sm(5trpgo3$^+#xiit_k3i1^'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = ['*']


# Application definition
 
INSTALLED_APPS = [
    'community',
    'saving',
    'hwanyul',
    'search_bank',
    'becomesuperrich',
    
    # API MAKER
    'drf_yasg',

    # CORS policy
    "corsheaders",
    'django_extensions',
    'finlife',
    'accounts',
    'rest_framework',
    'rest_framework.authtoken',
    'dj_rest_auth',
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.sites',
    'allauth',
    'allauth.account',
    'allauth.socialaccount',
    'allauth.socialaccount.providers.google',

    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
]

GRAPH_MODELS = {
  'all_applications': True,
  'group_models': True,
}



REST_AUTH = { # 회원가입시 토큰 발급
    'SESSION_LOGIN': False,
}

SITE_ID = 1
# 하나의 컨텐츠로 여러 개의 도메인에 등록하고 싶을 때 사용


REST_FRAMEWORK = {
    # Authentication
        # 'rest_framework.authentication.TokenAuthentication'
    
    'DEFAULT_AUTHENTICATION_CLASSES': [
        'rest_framework.authentication.TokenAuthentication'

    ],

    # permission
     # 'rest_framework.permissions.IsAuthenticated',
    #     'rest_framework.permissions.IsAuthenticatedOrReadOnly',
    'DEFAULT_PERMISSION_CLASSES': [
     'rest_framework.permissions.IsAuthenticated',

        'rest_framework.permissions.IsAuthenticatedOrReadOnly',
       
    ],

}




MIDDLEWARE = [
    'corsheaders.middleware.CorsMiddleware',
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]


CORS_ALLOWED_ORIGINS = [
    'http://localhost:8080',

]

CORS_ALLOWED_ORIGIN = True
CORS_ALLOW_ALL_ORIGINS = True


ROOT_URLCONF = 'mypjt.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [BASE_DIR/'templates'],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'mypjt.wsgi.application'

# Database
# https://docs.djangoproject.com/en/3.2/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': BASE_DIR / 'db.sqlite3',
    }
}


# Password validation
# https://docs.djangoproject.com/en/3.2/ref/settings/#auth-password-validators

AUTH_USER_MODEL = "accounts.User"
AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]

AUTHENTICATION_BACKENDS = [
    
    # Needed to login by username in Django admin, regardless of `allauth`
    'django.contrib.auth.backends.ModelBackend',

    # `allauth` specific authentication methods, such as login by e-mail
    'allauth.account.auth_backends.AuthenticationBackend',
    

]

# 구글 로그인 개발자 설정

SOCIALACCOUNT_PROVIDERS = {
    'google': {
        'APP': {
            'client_id': '',
            'secret': '',
            'key': '',
        }
    }
}




# Internationalization
# https://docs.djangoproject.com/en/3.2/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_L10N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/3.2/howto/static-files/

STATIC_URL = '/static/'

# Default primary key field type
# https://docs.djangoproject.com/en/3.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'



